C51 COMPILER V9.60.0.0   LEDBOARD                                                          10/30/2023 23:23:23 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE LEDBOARD
OBJECT MODULE PLACED IN .\OBJ\LedBoard.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\UserCode\LedBoard.c OPTIMIZE(8,SPEED) BROWSE INCDIR(.\HardWareCode;..
                    -\HardWareCode;..\UserCode) DEBUG OBJECTEXTEND PRINT(.\LST\LedBoard.lst) TABS(2) OBJECT(.\OBJ\LedBoard.obj)

line level    source

   1          
   2          
   3          #include <REG_MG82F6D17.h>
   4          #include ".\include\Type.h"
   5          #include ".\include\API_Macro_MG82F6D17.H"
   6          
   7          #include "LedBoard.h"
   8          #include "shiftreg.h"
   9          #include "UserDriverBridge.h"
  10          #include "HardWare.h"
  11          #include "SPI.h"
  12          
  13          uint8_t DataPkt[5] = {0,0,0,0,0};
  14          uint8_t LedState = 0;
  15          uint8_t LedColm = 0;
  16          uint32_t LedUpdateTimer = 0;
  17          
  18          uint8_t ActiveLedColm = 0;
  19          
  20          void GetTokenLocation(uint8_t pos,uint8_t LocationHolder[2]);
  21          uint8_t GetColmNumber(uint8_t LedNumber);
  22          void SetRowColm(uint8_t LedNumber,uint8_t LedColour);
  23          void nShiftOut(uint8_t NumberOfReg);
  24          void ResetLedDsply(void);
  25          void StrtLedUpdateTimer(uint32_t TimerVal);
  26          bit IsLedTimerExpr(void);
  27          uint8_t SearchAndSetRow(uint8_t LedColm,uint8_t LedNumber,uint8_t LedColour);
  28          void ClearRowColm(void);
  29          
  30          void LedManager(void)
  31          {
  32   1        int i=0 ;
  33   1        uint8_t scount = 0;
  34   1        switch(LedState)
  35   1        {
  36   2          case LED_INIT:
  37   2          ResetLedDsply();
  38   2          StrtLedUpdateTimer(0);
  39   2          LedColm = 1;
  40   2          LedState = LED_IDLE;
  41   2          break;
  42   2          
  43   2          case LED_IDLE:
  44   2          if(IsLedTimerExpr())
  45   2          {
  46   3            ClearRowColm();
  47   3            LedState = LED_SET_ROW_COLM;
  48   3          }
  49   2          break;
  50   2          
  51   2          case LED_SET_ROW_COLM:
  52   2          for(i = 0;i<4;i++)
  53   2          {
  54   3           scount += SearchAndSetRow(LedColm,DcodedRed[i],RED);
C51 COMPILER V9.60.0.0   LEDBOARD                                                          10/30/2023 23:23:23 PAGE 2   

  55   3           scount += SearchAndSetRow(LedColm,DcodedBlue[i],BLUE);
  56   3           scount += SearchAndSetRow(LedColm,DcodedGreen[i],GREEN);
  57   3           scount += SearchAndSetRow(LedColm,DcodedYellow[i],YELLOW);
  58   3          }
  59   2      
  60   2          LedColm++;
  61   2          if(LedColm == 17)LedColm = 0;
  62   2          ActiveLedColm = LedColm-1;
  63   2          if((scount > 0)||(ActiveLedColm >= 13))
  64   2          {
  65   3            scount = 0;
  66   3            LedState = LED_UPDATE;
  67   3          }
  68   2          
  69   2          else
  70   2          break;
  71   2      
  72   2          case LED_UPDATE:
  73   2          nShiftOut(5);
  74   2          digitalWrite(LED_LTCH_PIN,0);
  75   2          digitalWrite(LED_LTCH_PIN,1);
  76   2          StrtLedUpdateTimer(1);
  77   2          LedState = LED_IDLE;
  78   2          break;
  79   2        }
  80   1        
  81   1      }
  82          
  83          
  84          
  85          //--------FUNCTIONS FOR LED_MANAGER-----------
  86          void ResetLedDsply(void)
  87          {
  88   1        DataPkt[0] = 0xFF;
  89   1        DataPkt[1] = 0xFF;
  90   1        DataPkt[2] = 0xFF;
  91   1        DataPkt[3] = 0;
  92   1        DataPkt[4] = 0;
  93   1        nShiftOut(5);
  94   1      }
  95          
  96          void ClearRowColm(void)
  97          {
  98   1        DataPkt[0] = 0xFF;
  99   1        DataPkt[1] = 0xFF;
 100   1        DataPkt[2] = 0xFF;
 101   1        DataPkt[3] = 0;
 102   1        DataPkt[4] = 0; 
 103   1      }
 104          
 105          void StrtLedUpdateTimer(uint32_t TimerVal)
 106          {
 107   1         LedUpdateTimer = TimerVal;
 108   1      }
 109          
 110          bit IsLedTimerExpr(void)
 111          {
 112   1        if(LedUpdateTimer == 0)
 113   1        return 1;
 114   1        else
 115   1        return 0;
 116   1      }
C51 COMPILER V9.60.0.0   LEDBOARD                                                          10/30/2023 23:23:23 PAGE 3   

 117          //---------------------------------------------
 118          
 119          
 120          //----FUNC FOR MANAGE TIMER---------------------
 121          void LedTimer(void)
 122          {
 123   1        if(LedUpdateTimer>0)
 124   1        {
 125   2          LedUpdateTimer--;
 126   2        }
 127   1      }
 128          //----------------------------------------------
 129          
 130          uint8_t SearchAndSetRow(uint8_t LedColm,uint8_t LedNumber,uint8_t LedColour)
 131          {
 132   1      
 133   1        if(GetColmNumber(LedNumber) == LedColm)
 134   1        { 
 135   2         SetRowColm(LedNumber,LedColour);
 136   2         return 1;
 137   2        }
 138   1      
 139   1        else
 140   1          return 0;
 141   1        
 142   1      }
 143          
 144          uint8_t GetColmNumber(uint8_t LedNumber)
 145          {
 146   1        uint8_t ColmRow[2];
 147   1        GetTokenLocation(LedNumber,ColmRow);
 148   1        return ColmRow[0];
 149   1      }
 150            
 151          void SetRowColm(uint8_t LedNumber,uint8_t LedColour)
 152          {
 153   1        uint8_t colmNumber,rowNumber;
 154   1        uint8_t ColmRow[2];
 155   1        uint8_t subRow = 0;
 156   1        int subRow1 = -1;
 157   1        uint16_t Colm = 0;
 158   1        
 159   1         GetTokenLocation(LedNumber,ColmRow);
 160   1         colmNumber = ColmRow[0];
 161   1         rowNumber = ColmRow[1];
 162   1      
 163   1        //DataPkt[0-2] contain Row 0-20 and last 4bit is reserved for ohter work
 164   1        //DataPkt[3-4] contain Colm 1-16
 165   1         bitSet(Colm,(15-(colmNumber-1)));
 166   1         DataPkt[3] |= HIBYTE(Colm);
 167   1         DataPkt[4] |= LOBYTE(Colm); 
 168   1          
 169   1      
 170   1         
 171   1        //--------Find Sub Row Set That between 0-20---------------------
 172   1        switch(LedColour)
 173   1        {
 174   2          case RED:   subRow = (rowNumber*3)+0;                 break; 
 175   2          case GREEN: subRow = (rowNumber*3)+1;                 break;
 176   2          case BLUE:  subRow = (rowNumber*3)+2;                 break;  
 177   2          case YELLOW:subRow = (rowNumber*3);subRow1 = subRow+1;break;
 178   2        }
C51 COMPILER V9.60.0.0   LEDBOARD                                                          10/30/2023 23:23:23 PAGE 4   

 179   1        //---------------------------------------------------------------
 180   1      
 181   1          if(subRow < 8){ bitClear(DataPkt[0] ,7-subRow);}
 182   1          else if(subRow < 16){bitClear(DataPkt[1] ,15-subRow);}
 183   1          else if(subRow < 24){bitClear(DataPkt[2] ,23-subRow);}
 184   1          
 185   1          if((subRow1 > -1)&&(subRow1 < 8)){bitClear(DataPkt[0] ,7-subRow1);} 
 186   1          else if((subRow1 > -1)&&(subRow1 < 16)){bitClear(DataPkt[1] ,15-subRow1);}
 187   1          else if((subRow1 > -1)&&(subRow1 < 24)){bitClear(DataPkt[2] ,23-subRow1);}
 188   1      
 189   1      }
 190          
 191          
 192          
 193          
 194          
 195          void GetTokenLocation(uint8_t pos,uint8_t LocationHolder[2])
 196          {
 197   1        uint8_t Row,colm;
 198   1        //pos means LedPositions
 199   1        if(pos < 6 )                    {colm = 1;Row = pos;}
 200   1        else if((pos > 5)&&(pos <12))   {colm = 12;Row = (11-pos);}
 201   1        else if(pos == 12)              {colm = 11;Row = 0;}
 202   1        else if((pos > 12)&&(pos < 19)) {colm = 10;Row = (5-(18-pos));}
 203   1        else if((pos > 18)&&(pos < 25)) {colm = 9;Row = 24-pos;}
 204   1        else if((pos == 25))            {colm = 8;Row = 0;}
 205   1        else if((pos > 25)&&(pos < 32)) {colm = 7;Row = (5-(31-pos));}
 206   1        else if((pos > 31)&&(pos < 38)) {colm = 6;Row = 37-pos;}
 207   1        else if((pos == 38))            {colm = 5;Row = 0;}
 208   1        else if((pos > 38)&&(pos <45))  {colm = 4;Row = (5-(44-pos));}
 209   1        else if((pos > 44)&&(pos < 51)) {colm = 3;Row = 50-pos;}
 210   1        else if((pos == 51))            {colm = 2;Row = 0;}
 211   1        else 
 212   1        {
 213   2          switch(pos)
 214   2          {
 215   3            case R1:colm = 2;Row = 1;break;
 216   3            case R2:colm = 2;Row = 2;break;
 217   3            case R3:colm = 2;Row = 3;break;
 218   3            case R4:colm = 2;Row = 4;break;
 219   3            case R5:colm = 2;Row = 5;break;
 220   3            
 221   3            case B1:colm = 11;Row = 1;break;
 222   3            case B2:colm = 11;Row = 2;break;
 223   3            case B3:colm = 11;Row = 3;break;
 224   3            case B4:colm = 11;Row = 4;break;
 225   3            case B5:colm = 11;Row = 5;break;
 226   3            
 227   3            case G1:colm = 8;Row = 1;break;
 228   3            case G2:colm = 8;Row = 2;break;
 229   3            case G3:colm = 8;Row = 3;break;
 230   3            case G4:colm = 8;Row = 4;break;
 231   3            case G5:colm = 8;Row = 5;break;
 232   3            
 233   3            case Y1:colm = 5;Row = 1;break;
 234   3            case Y2:colm = 5;Row = 2;break;
 235   3            case Y3:colm = 5;Row = 3;break;
 236   3            case Y4:colm = 5;Row = 4;break;
 237   3            case Y5:colm = 5;Row = 5;break;
 238   3            
 239   3            //For Home Led ex RH1 :- RED HOME first Led
 240   3            case RH1:colm = 13;Row = 5;break;
C51 COMPILER V9.60.0.0   LEDBOARD                                                          10/30/2023 23:23:23 PAGE 5   

 241   3            case RH2:colm = 13;Row = 4;break;
 242   3            case RH3:colm = 13;Row = 3;break;
 243   3            case RH4:colm = 13;Row = 2;break;
 244   3              
 245   3            case BH1:colm = 14;Row = 5;break;
 246   3            case BH2:colm = 14;Row = 4;break;
 247   3            case BH3:colm = 14;Row = 3;break;
 248   3            case BH4:colm = 14;Row = 2;break;
 249   3            
 250   3            case GH1:colm = 15;Row = 5;break;
 251   3            case GH2:colm = 15;Row = 4;break;
 252   3            case GH3:colm = 15;Row = 3;break;
 253   3            case GH4:colm = 15;Row = 2;break;
 254   3              
 255   3            case YH1:colm = 16;Row = 5;break;
 256   3            case YH2:colm = 16;Row = 4;break;
 257   3            case YH3:colm = 16;Row = 3;break;
 258   3            case YH4:colm = 16;Row = 2;break;
 259   3           
 260   3            case TOKEN_OUT_R1:colm = 1;Row = 6;break;
 261   3            case TOKEN_OUT_R2:colm = 2;Row = 6;break;
 262   3            case TOKEN_OUT_R3:colm = 3;Row = 6;break;
 263   3            case TOKEN_OUT_R4:colm = 4;Row = 6;break;
 264   3      
 265   3            case TOKEN_OUT_B1:colm = 10;Row = 6;break;
 266   3            case TOKEN_OUT_B2:colm = 11;Row = 6;break;
 267   3            case TOKEN_OUT_B3:colm = 12;Row = 6;break;
 268   3            case TOKEN_OUT_B4:colm = 14;Row = 6;break;
 269   3      
 270   3            case TOKEN_OUT_G1:colm = 7;Row = 6;break;
 271   3            case TOKEN_OUT_G2:colm = 8;Row = 6;break;
 272   3            case TOKEN_OUT_G3:colm = 9;Row = 6;break;
 273   3            case TOKEN_OUT_G4:colm = 15;Row = 6;break;
 274   3      
 275   3            case TOKEN_OUT_Y1:colm = 4;Row = 6;break;
 276   3            case TOKEN_OUT_Y2:colm = 5;Row = 6;break;
 277   3            case TOKEN_OUT_Y3:colm = 6;Row = 6;break;
 278   3            case TOKEN_OUT_Y4:colm = 16;Row = 6;break;
 279   3              
 280   3          }
 281   2          
 282   2        }
 283   1        
 284   1        LocationHolder[0] = colm;
 285   1        LocationHolder[1] = Row;
 286   1      }
 287          void nShiftOut(uint8_t NumberOfReg)
 288          {
 289   1        int i= 0;
 290   1        NumberOfReg -= 1;
 291   1        for(i= NumberOfReg;i>=0;i--)
 292   1        {
 293   2          SPI_tranfer(DataPkt[i]);
 294   2        }
 295   1        
 296   1      }
 297          
 298          
 299          /*
 300          next Code will be Written Here
 301          */
 302          
C51 COMPILER V9.60.0.0   LEDBOARD                                                          10/30/2023 23:23:23 PAGE 6   

 303          
 304          
 305          
 306          
 307          
 308          
 309          
 310          
 311          
 312          
 313          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1572    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     12      23
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
